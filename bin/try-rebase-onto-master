#!/usr/bin/env node

const { promisify } = require('util');
const readline = require('readline');
const execCb = require('child_process').exec;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// const getInput = promisify(rl.question.bind(rl));

function getInput(question) {
  return new Promise((res) => rl.question(question, (input) => res(input)));
}

const execPromise = promisify(execCb);

// const readline = promisify(readlineCb);

async function tryRebaseOntoMaster() {
  try {
    const glog = await exec("git log --pretty=format:'%h %s'");
    const lines = glog.split('\n');

    const lastMaster = lines.find((line) => {
      const message = line.split(' ').slice(1).join(' ').trim();
      return /\(#\d+\)$/.test(message);
    });

    if (!lastMaster) {
      console.log('No master commit found');
      return;
    }

    const confirmInput = await getInput(
      `Rebase "${lastMaster}" onto master? [Y/n] `
    );

    if (confirmInput === 'Y') {
      console.log('Rebasing...');
      const hash = lastMaster.split(' ')[0];
      try {
        await exec(`git rebase --onto master ${hash}`);
      } catch (error) {
        if (error.stderr && /^error: could not apply/) {
          console.log(error.stderr);
          return;
        }

        throw error;
      }
    } else {
      console.log('Aborting');
    }
  } catch (error) {
    console.error(error);
  } finally {
    rl.close();
  }
}

async function exec(command) {
  const { stdout } = await execPromise(command);
  return stdout.trim();
}

tryRebaseOntoMaster();
